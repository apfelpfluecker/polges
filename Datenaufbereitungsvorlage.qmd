# Datenaufbereitung

Achtung: In dem Ordner, in dem diese Datei liegt, muss auch eine "\_common.R" liegen, damit das Ganze funktioniert.

Diese Vorlage ist separat und nicht Teil der Arbeit. Hier kommt die gesamte Datenaufbereitung rein. Resultat sollte ein Datensatz sein, mit dem dann die Datenanalyse erfolgt. Das hat den Vorteil, dass Aufbereitung und Analyse getrennt werden und unabhängig voneinander erfolgen kann. Das minimiert auch die Fehleranfälligkeit.

```{r}
#| include: false
#| echo: false
#| warning: false
#| label: setup

source('_common.R')
library(tidyr)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(stringr)

```

## Analyseebene 1: Individualdaten

```{r}
# Roh-Datensatz einlesen
sui_raw <- read_spss("data/sprache_und_identitaet_raw.sav")

# neuen Datesatz erstellen und nicht benötigte Informationen löschen
sui <- sui_raw %>% 
  select(
    S1,
    S2,
    S3,
    S4,
    S5_1,
    S5_2,
    S6,
    S7,
    S8o,
    S9o,
    S10,
    S11,
    S12,
    S13,
    Q1,
    Q2,
    Q13,
    Split_Q14,
  ) %>% 
  rename(
    age = S1,
    sex = S2,
    fed_state = S3,
    education = S4,
    polint = Q1,
    polinf = Q2,
    motong_ger = S5_1, # mother tongue
    motong_oth = S5_2,
    gainemp = S6, # gainful employment
    class = S7,
    housesize = S8o, # household size
    childinhouse = S9o, # children in household
    houseinc = S10, # household income
    commsize = S11, # community size
    party = S12,
    migback = S13, # migration background
    genatt = Q13 # attitude towards gender-neutral language
  ) %>% 
  mutate(eastwest = rec(
    fed_state,
    rec = "1,2,3,4,5,6,7,8,9,10 = 0 [West]; 12,13,14,15,16 = 1 [Ost]",
    var.label = "Ost-West-Zueghörigkeit",
    to.factor = TRUE
  )) %>% 
  mutate(educ = rec(
    education,
    rec = "1,2,3,5,6,7,8 = 0 [kein Studium]; 5 = 1 [Studium]",
    var.label = "Bildung (Studium)",
    to.factor = TRUE
  )) %>% 
  set_na(sex, na = 3) # Da sonst schwierig mit zu rechnen

sui <- set_na(sui, na = c(-66, 99, -99)) # unklar, was -66 bedeutet

saveRDS(sui, file = "data/sui.Rds")

```

## Analyseebene 2: Bundestagsanträge

```{r}
# Roh-Datensatz einlesen
bta_raw <- readRDS("data/btantraege_raw.Rds")

# neuen Datensatz erstellen und nicht benötigte Informationen löschen
bta <- bta_raw %>% 
  # Bundesratsanträge rausfiltern
  filter(herausgeber == "BT") %>% 
  select(
    id,
    dokumentnummer,
    datum,
    wahlperiode,
    urheber,
    autoren_anzahl,
    titel,
    text) %>% 
  rename(
    doknr = dokumentnummer)

# Parteienvariablen erstellen und belegen
bta$spd <- str_detect(bta$urheber, "SPD")
bta$union <- str_detect(bta$urheber, "CDU/CSU")
bta$gruene <- str_detect(bta$urheber, "B90/GR")
bta$fdp <- str_detect(bta$urheber, "FDP")
bta$afd <- str_detect(bta$urheber, "AfD")
bta$linke <- str_detect(bta$urheber, regex("linke", ignore_case = TRUE)) # Groß-/Kleinschreibung egal
bta$bsw <- str_detect(bta$urheber, "BSW")
bta$bundesregierung <- str_detect(bta$urheber, "Bundesregierung")
bta$bundesministerien <- str_detect(bta$urheber, "Bundesministerium")

# Datensatz schön formatieren
bta <- bta %>% 
  # Liste Urheber in eigene Variablen
  #unnest_wider(urheber, names_sep = "_") %>% 
  # unnötige Variablen entfernen
  #select(
  #  -urheber_einbringer,
  #  -urheber_titel
  #) %>% 
  #rename(urheber = urheber_bezeichnung) %>% 
  # Variablenlabels hinzufügen
  var_labels(
    id = "ID",
    doknr = "Dokumentennummer",
    datum = "Antragsdatum",
    wahlperiode = "Wahlperiode",
    urheber = "Antragsteller",
    autoren_anzahl = "Autorenanzahl",
    titel = "Antragstitel",
    text = "Antragstext",
    spd = "SPD-Antrag",
    union = "Unions-Antrag",
    gruene = "Grünen-Antrag",
    fdp = "FDP-Antrag",
    afd = "AfD-Antrag",
    linke = "LINKE-Antrag",
    bsw = "BSW-Antrag",
    bundesregierung = "Antrag der Bundesregierung",
    bundesministerien = "Antrag eines Bundesministeriums"
  ) %>% 
  to_numeric(id)

# Filtervariable erstellen
# Übersicht über Platzhalter-Syntax: https://rstudio.github.io/cheatsheets/html/strings.html bzw. hier: https://stringr.tidyverse.org/articles/regular-expressions.html oder hier: https://mhesselbarth.github.io/advanced-r-workshop/cheatsheets/stringr.pdf
# 1. Filter filtert alles, was „Sprache“ enthält
bta_filter1 <- c("sprache+", "sprachlich+")
bta$filter1 <- str_detect(bta$text, regex(paste(bta_filter1, collapse = "|"), ignore_case = TRUE)) # Paste verbindet die beiden Strings durch die Bedingung collapse mit Und # ignore_case sorgt dafür, dass Groß-/Kleinschreibung egal ist

# 2. Filte filtert nach dem Thema
bta_filter2 <- c("gender+", "geschlecht(.*)gerecht+", "generisch+")
# neue Variable anlegen, die mit TRUE/FALSE bei Treffer/Nichttreffer belegt wird
bta$filter2 <- str_detect(bta$text, regex(paste(bta_filter2, collapse = "|"), ignore_case = TRUE)) # Paste verbindet die beiden Strings durch die Bedingung collapse mit Und # ignore_case sorgt dafür, dass Groß-/Kleinschreibung egal ist

# Kombination beider Filter-Variablen
bta$filter <- ifelse(bta$filter1 == TRUE & bta$filter2 == TRUE, TRUE, FALSE)

# Prüfen, ob ID einzigartig
anyDuplicated(bta$id) == 0 # wenn TRUE, dann einzigartig

# Manuelle Korrektur
bta_ges <- select(bta_ges, -urheber)
write.table(bta_ges, file="bta_ges.txt", dec = ",", sep = "\t")




#manuelle Korrektur
bta_sub <- select(bta, id, filter, titel, text)

# Kriterium: Sprache wird verwendet in Kombination mit Gender oder Geschlecht
# alternativ: Antrag zu dem Thema...
# Wichtig: thematisieren, dass Verwendung von geS keine Kodierung hervorruft
korrekturen <- c(274476, 273997, 273665, 273415, 272589, 271735, 271017, 271008, 270408, 269855, 269758, 268322, 268300, 268085, 267184, 266226, 265560, 266454, 265134, 264631, 264465, 264266, 264257, 264146, 263599, 263285, 263070, 262726, 261824, 261803, 260843, 259703, 258987, 258349, 257242, 255852, 256043, 255159, 254265, 254257, 254219, 253536, 253521, 252965, 252608, 251871, 251870, 251858, 251804, 251830, 251140, 251059, 251053, 251039, 250674, 250662, 250614, 249635, 248684, 247841, 247806, 247819, 247493, 246643, 246635, 246526, 245930, 245647, 245080, 245076, 245071, 244769, 244768, 244442, 242994, 242918, 242335, 242244, 242220, 241587, 241007, 241003, 240760, 240760, 238585, 237866, 237859, 237051, 235708, 235694, 235691, 235245, 234897, 234831, 233894, 231397, 229770, 229748, 229251, 227816, 227808, 227281, 227084, 226636, 226633, 226340, 226168, 224830, 224791, 224054, 223675, 223668, 223083, 222685, 222500, 220694, 220450, 220380
                 )
for (i in korrekturen) {
  bta$filter[bta$id == i] <- FALSE
}

bta_sub <- bta %>% 
  select(id, filter2)
ids <- subset(bta_sub, filter2 == TRUE)$id
ids <- bta_sub$id[bta_sub$filter2 == TRUE]

# fertigen Datensatz speichern
saveRDS(bta, file = "data/btantraege.Rds")

```

```{r}
# neuen Datensatz erstellen für Parteiübersicht
# bei logischen Variablen werden bei sum() automatisch die TRUE-Werte gezählt
# Gesamtzahl der Anträge (absolut)
antr_gesamt <- c(
  sum(bta$spd), 
  sum(bta$union), 
  sum(bta$gruene), 
  sum(bta$fdp), 
  sum(bta$afd), 
  sum(bta$linke), 
  sum(bta$bsw),
  sum(bta$bundesregierung), 
  sum(bta$bundesministerien))

# Gesamtzahl der Anträge zum Thema Gendern (absolut)
antr_gendern <- c(
  sum(bta$spd & bta$filter), 
  sum(bta$union & bta$filter), 
  sum(bta$gruene & bta$filter), 
  sum(bta$fdp & bta$filter), 
  sum(bta$afd & bta$filter), 
  sum(bta$linke & bta$filter), 
  sum(bta$bsw & bta$filter),
  sum(bta$bundesregierung & bta$filter), 
  sum(bta$bundesministerien & bta$filter))

# Gesamtzahl der Anträge (relativ)
antr_gesamt_proz <- c(
  sum(bta$spd) / nrow(bta), 
  sum(bta$union) / nrow(bta), 
  sum(bta$gruene) / nrow(bta), 
  sum(bta$fdp) / nrow(bta), 
  sum(bta$afd) / nrow(bta), 
  sum(bta$linke) / nrow(bta), 
  sum(bta$bsw) / nrow(bta),
  sum(bta$bundesregierung) / nrow(bta),
  sum(bta$bundesministerien) / nrow(bta))*100

# Gesamtzahl der Anträge zum Thema Gendern (relativ)
antr_gendern_proz <- c(
  sum(bta$spd & bta$filter) / sum(bta$filter), 
  sum(bta$union & bta$filter) / sum(bta$filter), 
  sum(bta$gruene & bta$filter) / sum(bta$filter), 
  sum(bta$fdp & bta$filter) / sum(bta$filter), 
  sum(bta$afd & bta$filter) / sum(bta$filter), 
  sum(bta$linke & bta$filter) / sum(bta$filter), 
  sum(bta$bsw & bta$filter) / sum(bta$filter),
  sum(bta$bundesregierung & bta$filter) / sum(bta$filter), 
  sum(bta$bundesministerien & bta$filter) / sum(bta$filter))*100

# Verhältnis der Gender-thematisierenden Anträge zu den eigenen Anträgen
antr_gendern_gesamt <- c(
  sum(bta$spd & bta$filter) / sum(bta$spd), 
  sum(bta$union & bta$filter) / sum(bta$union), 
  sum(bta$gruene & bta$filter) / sum(bta$gruene), 
  sum(bta$fdp & bta$filter) / sum(bta$fdp), 
  sum(bta$afd & bta$filter) / sum(bta$afd), 
  sum(bta$linke & bta$filter) / sum(bta$linke), 
  sum(bta$bsw & bta$filter) / sum(bta$bsw),
  sum(bta$bundesregierung & bta$filter) / sum(bta$bundesregierung), 
  sum(bta$bundesministerien & bta$filter) / sum(bta$bundesministerien))*100

bta_sum <- data.frame(antr_gesamt, antr_gendern, antr_gesamt_proz, antr_gendern_proz, antr_gendern_gesamt)

rownames(bta_sum) <- c("SPD", "Union", "Grüne", "FDP", "AfD", "DIE LINKE", "BSW", "Bundesregierung", "Bundesministerien")

bta_sum <- bta_sum %>% 
  var_labels(
    antr_gesamt = "Gesamtzahl der Anträge",
    antr_gendern = "Gesamtzahl der geS-Anträge",
    antr_gesamt_proz = "Gesamtzahl der Anträge (relativ)",
    antr_gendern_proz = "Gesamtzahl der geS-Anträge (relativ)",
    antr_gendern_gesamt = "Verhältnis von geS-Anträgen zu eigenen Anträgen"
  )

# fertigen Datensatz speichern
saveRDS(bta_sum, file = "data/btantraege_sum.Rds")

```

## Analyseebene 3: Social-Media-Posts

...
